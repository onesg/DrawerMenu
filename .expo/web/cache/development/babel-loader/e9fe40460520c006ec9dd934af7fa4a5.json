{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport State from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar _gestureInstances = 0;\n\nvar GestureHandler = function () {\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this._gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }]);\n\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.view = null;\n    this.config = {};\n    this.hammer = null;\n    this.pendingGestures = {};\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _this.config.waitFor, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _gesture = _ref;\n\n          _gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n\n    this.destroy = () => {\n      this.clearSelfAsPending();\n\n      if (this.hammer) {\n        this.hammer.stop();\n        this.hammer.destroy();\n      }\n\n      this.hammer = null;\n    };\n\n    this.isPointInView = ({\n      x,\n      y\n    }) => {\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerStateChange: onHandlerStateChange,\n        onGestureHandlerEvent: onGestureEvent\n      } = this.ref.props;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n      }\n    };\n\n    this.sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n\n        if (this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n\n          this._stillWaiting = this._getPendingGestures();\n\n          if (this._stillWaiting.length) {\n            for (const gesture of this._stillWaiting) {\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!this._hasCustomActivationCriteria) {\n          return true;\n        }\n\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, { ...inputData,\n          deltaRotation\n        });\n\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      const params = this.getHammerConfig();\n      gesture.set({ ...params,\n        enable\n      });\n    };\n\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent() {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"parseNativeEvent\",\n    value: function parseNativeEvent(nativeEvent) {\n      return nativeEvent;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = ensureConfig({\n        enabled,\n        ...props\n      });\n      this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      const state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        },\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({ ...event,\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n\n        this.onRawEvent(ev);\n\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => this.onGestureEnded(event));\n      }\n\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {}\n  }, {\n    key: \"NativeGestureClass\",\n    get: function () {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const {\n            argMapping\n          } = method.__nodeConfig;\n\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n\n              if (key in event.nativeEvent) {\n                const nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  const props = { ...config\n  };\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(({\n      _handlerTag\n    }) => NodeManager.getHandler(_handlerTag)).filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["C:/workspace/react/DrawerMenu/node_modules/react-native-gesture-handler/web/GestureHandler.js"],"names":["Hammer","State","EventMap","NodeManager","_gestureInstances","GestureHandler","name","_gestureInstance","Error","isGestureRunning","hasGestureFailed","view","config","hammer","pendingGestures","oldState","UNDETERMINED","previousState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","onGestureHandlerStateChange","onHandlerStateChange","onGestureHandlerEvent","onGestureEvent","ref","props","event","transformEventData","invokeNullableMethod","state","sync","get","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","type","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","getState","transformNativeEvent","handlerTag","target","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","INPUT_CANCEL","isFinal","onGestureEnded","isFirst","findNodeHandle","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_handlerTag","getHandler","v","forEach","prop","Number","NaN"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\r\nimport { findNodeHandle } from 'react-native';\r\n\r\nimport State from '../State';\r\nimport { EventMap } from './constants';\r\nimport * as NodeManager from './NodeManager';\r\n\r\nlet _gestureInstances = 0;\r\n\r\nclass GestureHandler {\r\n  isGestureRunning = false;\r\n  hasGestureFailed = false;\r\n  view = null;\r\n  config = {};\r\n  hammer = null;\r\n  pendingGestures = {};\r\n  oldState = State.UNDETERMINED;\r\n  previousState = State.UNDETERMINED;\r\n  lastSentState = null;\r\n\r\n  get id() {\r\n    return `${this.name}${this._gestureInstance}`;\r\n  }\r\n\r\n  get isDiscrete() {\r\n    return false;\r\n  }\r\n\r\n  get shouldEnableGestureOnSetup() {\r\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\r\n  }\r\n\r\n  constructor() {\r\n    this._gestureInstance = _gestureInstances++;\r\n  }\r\n\r\n  getConfig() {\r\n    return this.config;\r\n  }\r\n\r\n  onWaitingEnded(gesture) {}\r\n\r\n  removePendingGesture(id) {\r\n    delete this.pendingGestures[id];\r\n  }\r\n\r\n  addPendingGesture(gesture) {\r\n    this.pendingGestures[gesture.id] = gesture;\r\n  }\r\n\r\n  isGestureEnabledForEvent() {\r\n    return { success: true };\r\n  }\r\n\r\n  parseNativeEvent(nativeEvent) {\r\n    return nativeEvent;\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    throw new Error('Must override GestureHandler.NativeGestureClass');\r\n  }\r\n\r\n  updateHasCustomActivationCriteria(config) {\r\n    return true;\r\n  }\r\n\r\n  clearSelfAsPending = () => {\r\n    if (Array.isArray(this.config.waitFor)) {\r\n      for (const gesture of this.config.waitFor) {\r\n        gesture.removePendingGesture(this.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  updateGestureConfig({ enabled = true, ...props }) {\r\n    this.clearSelfAsPending();\r\n\r\n    this.config = ensureConfig({ enabled, ...props });\r\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\r\n      this.config\r\n    );\r\n    if (Array.isArray(this.config.waitFor)) {\r\n      for (const gesture of this.config.waitFor) {\r\n        gesture.addPendingGesture(this);\r\n      }\r\n    }\r\n\r\n    if (this.hammer) {\r\n      this.sync();\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  destroy = () => {\r\n    this.clearSelfAsPending();\r\n\r\n    if (this.hammer) {\r\n      this.hammer.stop();\r\n      this.hammer.destroy();\r\n    }\r\n    this.hammer = null;\r\n  };\r\n\r\n  isPointInView = ({ x, y }) => {\r\n    const rect = this.view.getBoundingClientRect();\r\n    const pointerInside =\r\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\r\n    return pointerInside;\r\n  };\r\n\r\n  getState(type) {\r\n    return EventMap[type];\r\n  }\r\n\r\n  transformEventData(event) {\r\n    const { eventType, maxPointers: numberOfPointers } = event;\r\n    // const direction = DirectionMap[ev.direction];\r\n    const changedTouch = event.changedPointers[0];\r\n    const pointerInside = this.isPointInView({\r\n      x: changedTouch.clientX,\r\n      y: changedTouch.clientY,\r\n    });\r\n\r\n    const state = this.getState(eventType);\r\n    if (state !== this.previousState) {\r\n      this.oldState = this.previousState;\r\n      this.previousState = state;\r\n    }\r\n\r\n    return {\r\n      nativeEvent: {\r\n        numberOfPointers,\r\n        state,\r\n        pointerInside,\r\n        ...this.transformNativeEvent(event),\r\n        // onHandlerStateChange only\r\n        handlerTag: this.handlerTag,\r\n        target: this.ref,\r\n        oldState: this.oldState,\r\n      },\r\n      timeStamp: Date.now(),\r\n    };\r\n  }\r\n\r\n  transformNativeEvent(event) {\r\n    return {};\r\n  }\r\n\r\n  sendEvent = nativeEvent => {\r\n    const {\r\n      onGestureHandlerStateChange: onHandlerStateChange,\r\n      onGestureHandlerEvent: onGestureEvent,\r\n    } = this.ref.props;\r\n\r\n    const event = this.transformEventData(nativeEvent);\r\n\r\n    invokeNullableMethod('onGestureEvent', onGestureEvent, event);\r\n    if (this.lastSentState !== event.nativeEvent.state) {\r\n      this.lastSentState = event.nativeEvent.state;\r\n      invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\r\n    }\r\n  };\r\n\r\n  cancelPendingGestures(event) {\r\n    for (const gesture of Object.values(this.pendingGestures)) {\r\n      if (gesture && gesture.isGestureRunning) {\r\n        gesture.hasGestureFailed = true;\r\n        gesture.cancelEvent(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyPendingGestures() {\r\n    for (const gesture of Object.values(this.pendingGestures)) {\r\n      if (gesture) {\r\n        gesture.onWaitingEnded(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  onGestureEnded(event) {\r\n    this.isGestureRunning = false;\r\n    this.cancelPendingGestures(event);\r\n  }\r\n\r\n  forceInvalidate(event) {\r\n    if (this.isGestureRunning) {\r\n      this.hasGestureFailed = true;\r\n      this.cancelEvent(event);\r\n    }\r\n  }\r\n\r\n  cancelEvent(event) {\r\n    this.notifyPendingGestures();\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_CANCEL,\r\n      isFinal: true,\r\n    });\r\n    this.onGestureEnded(event);\r\n  }\r\n\r\n  onRawEvent({ isFirst }) {\r\n    if (isFirst) {\r\n      this.hasGestureFailed = false;\r\n    }\r\n  }\r\n\r\n  setView(ref) {\r\n    if (ref == null) {\r\n      this.destroy();\r\n      this.view = null;\r\n      return;\r\n    }\r\n\r\n    this.ref = ref;\r\n\r\n    this.view = findNodeHandle(ref);\r\n    this.hammer = new Hammer.Manager(this.view);\r\n\r\n    this.oldState = State.UNDETERMINED;\r\n    this.previousState = State.UNDETERMINED;\r\n    this.lastSentState = null;\r\n\r\n    const { NativeGestureClass } = this;\r\n    const gesture = new NativeGestureClass(this.getHammerConfig());\r\n    this.hammer.add(gesture);\r\n\r\n    this.hammer.on('hammer.input', ev => {\r\n      if (!this.config.enabled) {\r\n        this.hasGestureFailed = false;\r\n        this.isGestureRunning = false;\r\n        return;\r\n      }\r\n\r\n      this.onRawEvent(ev);\r\n\r\n      // TODO: Bacon: Check against something other than null\r\n      // The isFirst value is not called when the first rotation is calculated.\r\n      if (this.initialRotation === null && ev.rotation !== 0) {\r\n        this.initialRotation = ev.rotation;\r\n      }\r\n      if (ev.isFinal) {\r\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\r\n        setTimeout(() => {\r\n          this.initialRotation = null;\r\n          this.hasGestureFailed = false;\r\n        });\r\n      }\r\n    });\r\n\r\n    this.setupEvents();\r\n    this.sync();\r\n  }\r\n\r\n  setupEvents() {\r\n    if (!this.isDiscrete) {\r\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\r\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event =>\r\n        this.onGestureEnded(event)\r\n      );\r\n    }\r\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\r\n  }\r\n\r\n  onStart({ deltaX, deltaY, rotation }) {\r\n    // Reset the state for the next gesture\r\n    this.oldState = State.UNDETERMINED;\r\n    this.previousState = State.UNDETERMINED;\r\n    this.lastSentState = null;\r\n\r\n    this.isGestureRunning = true;\r\n    this.__initialX = deltaX;\r\n    this.__initialY = deltaY;\r\n    this.initialRotation = rotation;\r\n  }\r\n\r\n  onGestureActivated(ev) {\r\n    this.sendEvent(ev);\r\n  }\r\n\r\n  onSuccess() {}\r\n\r\n  _getPendingGestures() {\r\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\r\n      // Get the list of gestures that this gesture is still waiting for.\r\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\r\n      const stillWaiting = this.config.waitFor.filter(\r\n        ({ hasGestureFailed }) => hasGestureFailed === false\r\n      );\r\n      return stillWaiting;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getHammerConfig() {\r\n    const pointers =\r\n      this.config.minPointers === this.config.maxPointers\r\n        ? this.config.minPointers\r\n        : 0;\r\n    return {\r\n      pointers,\r\n    };\r\n  }\r\n\r\n  sync = () => {\r\n    const gesture = this.hammer.get(this.name);\r\n    if (!gesture) return;\r\n\r\n    const enable = (recognizer, inputData) => {\r\n      if (!this.config.enabled) {\r\n        this.isGestureRunning = false;\r\n        this.hasGestureFailed = false;\r\n        return false;\r\n      }\r\n\r\n      // Prevent events before the system is ready.\r\n      if (\r\n        !inputData ||\r\n        !recognizer.options ||\r\n        typeof inputData.maxPointers === 'undefined'\r\n      ) {\r\n        return this.shouldEnableGestureOnSetup;\r\n      }\r\n\r\n      if (this.hasGestureFailed) {\r\n        return false;\r\n      }\r\n\r\n      if (!this.isDiscrete) {\r\n        if (this.isGestureRunning) {\r\n          return true;\r\n        }\r\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\r\n        // Only process if there are views to wait for.\r\n        this._stillWaiting = this._getPendingGestures();\r\n        // This gesture should continue waiting.\r\n        if (this._stillWaiting.length) {\r\n          // Check to see if one of the gestures you're waiting for has started.\r\n          // If it has then the gesture should fail.\r\n          for (const gesture of this._stillWaiting) {\r\n            // When the target gesture has started, this gesture must force fail.\r\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\r\n              this.hasGestureFailed = true;\r\n              this.isGestureRunning = false;\r\n              return false;\r\n            }\r\n          }\r\n          // This gesture shouldn't start until the others have finished.\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Use default behaviour\r\n      if (!this._hasCustomActivationCriteria) {\r\n        return true;\r\n      }\r\n\r\n      const deltaRotation =\r\n        this.initialRotation == null\r\n          ? 0\r\n          : inputData.rotation - this.initialRotation;\r\n      const { success, failed } = this.isGestureEnabledForEvent(\r\n        this.getConfig(),\r\n        recognizer,\r\n        {\r\n          ...inputData,\r\n          deltaRotation,\r\n        }\r\n      );\r\n\r\n      if (failed) {\r\n        this.simulateCancelEvent(inputData);\r\n        this.hasGestureFailed = true;\r\n      }\r\n      return success;\r\n    };\r\n\r\n    const params = this.getHammerConfig();\r\n    gesture.set({ ...params, enable });\r\n  };\r\n\r\n  simulateCancelEvent(inputData) {}\r\n}\r\n\r\n// Used for sending data to a callback or AnimatedEvent\r\nfunction invokeNullableMethod(name, method, event) {\r\n  if (method) {\r\n    if (typeof method === 'function') {\r\n      method(event);\r\n    } else {\r\n      // For use with reanimated's AnimatedEvent\r\n      if (\r\n        '__getHandler' in method &&\r\n        typeof method.__getHandler === 'function'\r\n      ) {\r\n        const handler = method.__getHandler();\r\n        invokeNullableMethod(name, handler, event);\r\n      } else {\r\n        if ('__nodeConfig' in method) {\r\n          const { argMapping } = method.__nodeConfig;\r\n          if (Array.isArray(argMapping)) {\r\n            for (const index in argMapping) {\r\n              const [key, value] = argMapping[index];\r\n              if (key in event.nativeEvent) {\r\n                const nativeValue = event.nativeEvent[key];\r\n                if (value && value.setValue) {\r\n                  // Reanimated API\r\n                  value.setValue(nativeValue);\r\n                } else {\r\n                  // RN Animated API\r\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Validate the props\r\nfunction ensureConfig(config) {\r\n  const props = { ...config };\r\n\r\n  if ('minDist' in config) {\r\n    props.minDist = config.minDist;\r\n    props.minDistSq = props.minDist * props.minDist;\r\n  }\r\n  if ('minVelocity' in config) {\r\n    props.minVelocity = config.minVelocity;\r\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\r\n  }\r\n  if ('maxDist' in config) {\r\n    props.maxDist = config.maxDist;\r\n    props.maxDistSq = config.maxDist * config.maxDist;\r\n  }\r\n  if ('waitFor' in config) {\r\n    props.waitFor = asArray(config.waitFor)\r\n      .map(({ _handlerTag }) => NodeManager.getHandler(_handlerTag))\r\n      .filter(v => v);\r\n  } else {\r\n    props.waitFor = null;\r\n  }\r\n\r\n  [\r\n    'minPointers',\r\n    'maxPointers',\r\n    'minDist',\r\n    'maxDist',\r\n    'maxDistSq',\r\n    'minVelocitySq',\r\n    'minDistSq',\r\n    'minVelocity',\r\n    'failOffsetXStart',\r\n    'failOffsetYStart',\r\n    'failOffsetXEnd',\r\n    'failOffsetYEnd',\r\n    'activeOffsetXStart',\r\n    'activeOffsetXEnd',\r\n    'activeOffsetYStart',\r\n    'activeOffsetYEnd',\r\n  ].forEach(prop => {\r\n    if (typeof props[prop] === 'undefined') {\r\n      props[prop] = Number.NaN;\r\n    }\r\n  });\r\n  return props;\r\n}\r\n\r\nfunction asArray(value) {\r\n  return value == null ? [] : Array.isArray(value) ? value : [value];\r\n}\r\n\r\nexport default GestureHandler;\r\n"]},"metadata":{},"sourceType":"module"}